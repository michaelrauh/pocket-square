#lang racket
(require "square.rkt" "merge.rkt" "book.rkt")
(provide example-run)
(define (example-run)
  ;(define b1 (make-book-from-text "a b. c d. a c. b d. e f. g h."))
  ;(define b2 (make-book-from-text "a b. c d. a c. b d. e g. f h."))
  (define b1 (make-book-from-file "example.txt"))
  (println "read first book")
  (define b2 (make-book-from-file "example2.txt"))
  (println "read second book")
  (define s1 (make-all-squares b1))
  (println "found all squares for first book")
  (define s2 (make-all-squares b2))
  (println "found all squares for second book")
  (define b3 (combine-books b1 b2))
  (println "combined books")
  (define s3 (new-squares b1 b2 b3))
  (println "found all new (though they may still be duplicate")
  s3)